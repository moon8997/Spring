<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="board">

	<insert id="test_insert">
		insert into spring_test(no, name, writeday)
		values(101, '이재희', default)
	</insert>
	
	
	<!--  !!!! 주의해야할 사항은 리턴타입이 List<E> 이더라도 resultType 은 E 으로 해야만 한다. !!!! --> 
	<select id="test_select" resultType="com.spring.board.model.TestVO">
	    select no, name, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday  
		from spring_test
		order by writeday desc
	</select>
	
	
	<!-- #### 중요 #### 
		 HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때 
		 1. 데이터로 사용할때는 #{key명} 이고,
		 2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
		 3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는 
		       그냥 <if test="key명"> <when test="key명"> 으로 사용한다. 
	-->
	<insert id="test_insert_map" parameterType="HashMap">
		insert into spring_test(no, name, writeday)
		values(#{no}, #{name}, default)
	</insert>
	
	
	<!-- === 파라미터로 VO가 들어오면 입력해줄때 값은 #{get다음에나오는 메소드명인데 첫글자는 반드시 소문자} 으로 해준다. --> 
	<insert id="test_insert_vo" parameterType="com.spring.board.model.TestVO">
	    insert into spring_test(no, name, writeday)
		values(#{no}, #{irum}, default)
	</insert>
	
	
	
	<!-- =============================================================== -->
	
	<!-- === #39. 시작페이지에서 메인 이미지를 보여주는 것 === --> 
	<select id="getImgfilenameList" resultType="String">
		select imgfilename 
		from TBL_MAIN_IMAGE
		order by imgno desc
	</select>
	
	
	<!-- === #47. 로그인 처리하기 === -->
	<!-- 
	<select id="getLoginMember" resultType="com.spring.board.model.MemberVO" parameterType="HashMap">
		SELECT userid, name, email, mobile, postcode, address, detailaddress, extraaddress, gender  
		     , birthyyyy, birthmm, birthdd, coin, point, registerday, pwdchangegap  
		     , nvl(lastlogingap, trunc( months_between(sysdate, registerday) ) ) AS lastlogingap 
		FROM 
		 ( 
		  select userid, name, email, mobile, postcode, address, detailaddress, extraaddress, gender 
		        , substr(birthday,1,4) AS birthyyyy, substr(birthday,6,2) AS birthmm, substr(birthday,9) AS birthdd  
		        , coin, point, to_char(registerday, 'yyyy-mm-dd') AS registerday 
		        , trunc( months_between(sysdate, lastpwdchangedate) ) AS pwdchangegap 
		  from tbl_member 
		  where status = 1 and userid = #{userid} and pwd = #{pwd}  
		 ) M 
		CROSS JOIN 
		(
		 select trunc( months_between(sysdate, max(logindate)) ) AS lastlogingap
		 from tbl_loginhistory
		 where fk_userid = #{userid}
		) H
	</select>
	<update id="updateIdle" parameterType="String">
	    update tbl_member set idle = 1
	    where userid = #{userid}
	</update>
	-->
	
	
	<!-- === #139. 로그인 처리하기 === 
	                  먼저, 위의 #47  을 주석처리 하고서 아래처럼 한다. -->
	<select id="getLoginMember" resultType="com.spring.board.model.MemberVO" parameterType="HashMap">     
		select userid, name, email, mobile, postcode, address, detailaddress, extraaddress, gender
		     , birthyyyy, birthmm, birthdd, coin, point, registerday, pwdchangegap
		     , nvl( lastlogingap, trunc( months_between(sysdate, registerday) )) as lastlogingap
		     , gradelevel 
		from
		(
		select userid, name, email, mobile, postcode, address, detailaddress, extraaddress, gender
		     , substr(birthday,1,4) as birthyyyy, substr(birthday,6,2) as birthmm, substr(birthday,9) as birthdd
		     , coin, point, to_char(registerday,'yyyy-mm-dd') as registerday
		     , trunc( months_between(sysdate, lastpwdchangedate) ) as pwdchangegap
		     , gradelevel 
		from tbl_member
		where status = 1 and userid = #{userid} and pwd = #{pwd} 
		) M 
		cross join 
		(
		select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		from tbl_loginhistory 
		where fk_userid = #{userid} 
		) H
	</select>
	<update id="updateIdle" parameterType="String">
		update tbl_member set idle = 1
		where userid = #{userid}
	</update>
	
	
	<!--  ==== #57. 글쓰기(파일첨부가 없는 글쓰기) ====  -->
	<!--
	<insert id="add" parameterType="com.spring.board.model.BoardVO">
	     insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status)
	     values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
	</insert>
	-->
	
	<!--  ==== #147. 원글쓰기 또는 답변글쓰기(파일첨부가 없는 글쓰기) ==== 
	                     먼저  #57 을 주석처리한 후 아래처럼 해야 한다. -->
	<insert id="add" parameterType="com.spring.board.model.BoardVO">
	     <if test='fk_seq.equals("")'>
		     insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno)
		     values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, default, default)   
	     </if>
	     
	     <if test='!fk_seq.equals("")'>
		     insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno)
		     values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depthno}+1)    
	     </if>
	</insert>
	

    <!--  ==== #61. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 ====  -->
    <!-- 
    <select id="boardListNoSearch" resultType="com.spring.board.model.BoardVO">
	    select seq, fk_userid, name, subject  
		     , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		from tbl_board
		where status = 1
		order by seq desc
    </select>
    -->
    
    <!-- 먼저 #61 을 주석처리를 하고서 아래의 작업을 한다. -->
    <!--  ==== #95. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 ==== 
                                     전체 글목록을 보여줄때 딸린 댓글의 개수도 보여준다. -->
    <select id="boardListNoSearch" resultType="com.spring.board.model.BoardVO">
	    select seq, fk_userid, name, subject  
		     , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     , commentCount
		from tbl_board
		where status = 1
		order by seq desc
    </select>


    <!-- ==== #66. 글1개 조회하기 ==== -->
    <!-- 
    <select id="getView" parameterType="HashMap" resultType="com.spring.board.model.BoardVO">
		select previousseq, previoussubject
		     , seq, fk_userid, name, subject, content, readCount, regDate, pw 
		     , nextseq, nextsubject 
		from 
		(
		    select lag(seq,1) over(order by seq desc) AS previousseq 
		         , lag(subject,1) over(order by seq desc) AS previoussubject 
		         , seq, fk_userid, name, subject, content, readCount
		         , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , pw 
		         , lead(seq,1) over(order by seq desc) AS nextseq
		         , lead(subject,1) over(order by seq desc) AS nextsubject
		    from tbl_board
		    where status = 1
		    <if test='searchType != "" and searchWord != "" '>
		    and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		    </if>
		) V
		where V.seq = #{seq}
    </select>
    -->
     
    <!-- ==== #140. (댓글 및 답변글쓰기 게시판에서) 글1개 조회하기 ==== 
                         먼저 위의 #66 을 주석처리 한 다음에 아래와 같이 한다.
    -->
    <!-- 
    <select id="getView" parameterType="HashMap" resultType="com.spring.board.model.BoardVO">
		select previousseq, previoussubject
		     , seq, fk_userid, name, subject, content, readCount, regDate, pw 
		     , nextseq, nextsubject 
		     , groupno, fk_seq, depthno
		from 
		(
		    select lag(seq,1) over(order by seq desc) AS previousseq 
		         , lag(subject,1) over(order by seq desc) AS previoussubject 
		         , seq, fk_userid, name, subject, content, readCount
		         , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , pw 
		         , lead(seq,1) over(order by seq desc) AS nextseq
		         , lead(subject,1) over(order by seq desc) AS nextsubject
		         
		         , groupno, fk_seq, depthno
		    from tbl_board
		    where status = 1
		    <if test='searchType != "" and searchWord != "" '>
		    and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		    </if>
		) V
		where V.seq = #{seq}
    </select>
    -->
    
    <!-- ==== #161. (댓글 및 답변글쓰기 및 파일첨부가 있는 게시판에서) 글1개 조회하기 ==== 
                         먼저 위의 #140 을 주석처리 한 다음에 아래와 같이 한다.
    -->
    <select id="getView" parameterType="HashMap" resultType="com.spring.board.model.BoardVO">
		select previousseq, previoussubject
		     , seq, fk_userid, name, subject, content, readCount, regDate, pw 
		     , nextseq, nextsubject 
		     , groupno, fk_seq, depthno
		     , fileName, orgFilename, fileSize
		from 
		(
		    select lag(seq,1) over(order by seq desc) AS previousseq 
		         , lag(subject,1) over(order by seq desc) AS previoussubject 
		         
		         , seq, fk_userid, name, subject, content, readCount
		         , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		         , pw 
		         
		         , lead(seq,1) over(order by seq desc) AS nextseq
		         , lead(subject,1) over(order by seq desc) AS nextsubject
		         
		         , groupno, fk_seq, depthno
		         
		         , fileName, orgFilename, fileSize
		    from tbl_board
		    where status = 1
		    <if test='searchType != "" and searchWord != "" '>
		    and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		    </if>
		) V
		where V.seq = #{seq}
    </select>
    
    
    <!-- ==== #67. 글조회수 1증가 하기 ==== -->
    <update id="setAddReadCount" parameterType="String">
    	update tbl_board set readCount = readCount + 1
    	where seq = #{seq}
    </update>
    
    
        
    <!-- ==== #75. 1개글 수정하기 ==== -->
    <update id="edit" parameterType="com.spring.board.model.BoardVO">
	    update tbl_board set subject = #{subject}
		                   , content = #{content}
		where seq = #{seq} and pw = #{pw}
    </update>


    <!-- === #80. 1개글 삭제하기 === -->
    <delete id="del" parameterType="HashMap">
    	delete from tbl_board
    	where seq = #{seq}	
    </delete>


    <!-- #88. 댓글쓰기(tbl_comment 테이블에 insert) === -->
    <insert id="addComment" parameterType="com.spring.board.model.CommentVO">
        <!-- 첨부파일이 없는 경우 -->
        <if test="fileName == null">
        	insert into tbl_comment(seq, fk_userid, name, content, regDate, parentSeq, status) 
        	values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default)
   		</if>
        
        <!-- 첨부파일이 있는 경우 -->
        <if test="fileName != null">
        	insert into tbl_comment(seq, fk_userid, name, content, regDate, parentSeq, status, fileName, orgFilename, fileSize) 
        	values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default, #{fileName}, #{orgFilename}, #{fileSize}) 
   		</if>
    </insert>
    
    <!--  === #89.-1  tbl_board 테이블에 commentCount 컬럼의 값을 1증가(update) === -->  
	<update id="updateCommentCount" parameterType="String">
    	update tbl_board set commentCount = commentCount + 1 
    	where seq = #{parentSeq}
    </update>
    
    <!-- === #89.-2  tbl_member 테이블에 point 컬럼의 값을 넘어온 숫자만큼(예: 50) 증가(update) === --> 
	<update id="updateMemberPoint" parameterType="HashMap">
    	update tbl_member set point = point + to_number(#{point}) 
		where userid = #{userid}
    </update>
    
    
    <!-- === #93. 원게시물에 딸린 댓글들을 조회해오기 === -->  
    <!-- 첨부파일이 없는 경우  -->
    <select id="getCommentList" parameterType="String" resultType="com.spring.board.model.CommentVO"> 
	    select name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate 
		from tbl_comment
		where status = 1 and parentSeq = #{parentSeq}
		order by seq desc
    </select>
    
    
    <!-- === #100. BoardAOP 클래스에 사용하는 것으로 특정 회원에게 특정 점수만큼 포인트를 증가하기 위한 것 === -->  
    <update id="pointPlus" parameterType="HashMap">
        update tbl_member set point = point + to_number(#{point})
        where userid = #{fk_userid}
    </update>
    
    
    <!-- #### 중요 #### 
		 HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때 
		 1. 데이터로 사용할때는 #{key명} 이고,
		 2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
		 3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는 
		       그냥 <if test="key명"> <when test="key명"> 으로 사용한다. 
	-->
    <!-- == #105. 페이징 처리를 안한 검색어가 있는 전체 글목록 보여주기 == -->
    <select id="boardListSearch" parameterType="HashMap" resultType="com.spring.board.model.BoardVO">
    	select seq, fk_userid, name, subject  
		     , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     , commentCount
		from tbl_board
		where status = 1
		<if test='searchType != "" and searchWord != ""'>
		and lower(${searchType}) like '%'||lower(#{searchWord})||'%'
		</if>
		order by seq desc
    </select>
    
    
    <!-- === #111. 검색어 입력시 자동글 완성하기 6 === -->
    <select id="wordSearchShow" parameterType="HashMap" resultType="String">
    	<choose>
    		<when test="searchType eq 'name'">
    			select distinct ${searchType}
    		</when>
    		<otherwise>
    			select ${searchType}
    		</otherwise>
    	</choose>
    	from tbl_board
    	where status = 1 
    	and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
    	<!-- select 문에서 distinct 와 order by 절을 함께 사용할때는 조심해야 한다.
		     order by 절에는 select 문에서 사용된 컬럼만 들어올 수가 있다.
		         또는 order by 절을 사용하지 않아야 한다.
		 -->
		 <choose>
    		<when test="searchType neq 'subject'">
    			order by ${searchType} asc
    		</when>
    		<otherwise>
    			order by seq desc
    		</otherwise>
    	</choose>
    </select>
    
    
    <!-- === #117. 총 게시물 건수(totalCount) 구하기 - 검색이 있을때 와 검색이 없을때로 나뉜다. === -->
    <select id="getTotalCount" parameterType="HashMap" resultType="int">
	    select count(*)
		from tbl_board
		where status = 1
		<if test='searchType != ""'>
		and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		</if>
    </select> 
   
   
    <!-- === #120. 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함 한 것) === -->
    <!-- 
    <select id="boardListSearchWithPaging" parameterType="HashMap" resultType="com.spring.board.model.BoardVO"> 
	    select seq, fk_userid, name, subject, readCount, regDate, commentCount 
		from 
		(
		select row_number() over(order by seq desc) AS rno,
		       seq, fk_userid, name, subject, readCount,
		       to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, 
		       commentCount
		from tbl_board
		where status = 1
		<if test='searchType != "" and searchWord != ""'>
		and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		</if>
		) V 
		where rno between #{startRno} and #{endRno}
    </select>
    -->
    
    
    <!-- === #148. 답변형 게시판의 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함 한 것) 
                        먼저 위의 #120 을 주석처리한 이후에 아래아 같이 한다. === -->
    <!--                   
    <select id="boardListSearchWithPaging" parameterType="HashMap" resultType="com.spring.board.model.BoardVO"> 
		select seq, fk_userid, name, subject, readCount, regDate, commentCount, 
		       groupno, fk_seq, depthno
		from 
		(
		    select rownum AS rno,
		           seq, fk_userid, name, subject, readCount, regDate, commentCount,
		           groupno, fk_seq, depthno
		    from 
		    ( 
		       select seq, fk_userid, name, subject, readCount,
		              to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, 
		              commentCount,
		              groupno, fk_seq, depthno 
		        from tbl_board
		        where status = 1
		        <if test='searchType != "" and searchWord != ""'>
		        and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		        </if>
		        start with fk_seq = 0
		        connect by prior seq = fk_seq 
		        order siblings by groupno desc, seq asc                   
		    ) V 
		) T 
		where rno between #{startRno} and #{endRno}
    </select>
    -->  
     
    
    <!-- === #160. 파일첨부가 있는 답변형 게시판의 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함 한 것) 
                        먼저 위의 #148 을 주석처리한 이후에 아래아 같이 한다. === -->
    <select id="boardListSearchWithPaging" parameterType="HashMap" resultType="com.spring.board.model.BoardVO"> 
		select seq, fk_userid, name, subject, readCount, regDate, commentCount, 
		       groupno, fk_seq, depthno,
		       fileName
		from 
		(
		    select rownum AS rno,
		           seq, fk_userid, name, subject, readCount, regDate, commentCount,
		           groupno, fk_seq, depthno,
		           fileName 
		    from 
		    ( 
		       select seq, fk_userid, name, subject, readCount,
		              to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, 
		              commentCount,
		              groupno, fk_seq, depthno,
		              fileName 
		        from tbl_board
		        where status = 1
		        <if test='searchType != "" and searchWord != ""'>
		        and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		        </if>
		        start with fk_seq = 0
		        connect by prior seq = fk_seq 
		        order siblings by groupno desc, seq asc                   
		    ) V 
		) T 
		where rno between #{startRno} and #{endRno}
    </select>
    
    
    
    
    
    
    <!-- === #131. 원게시물에 딸린 댓글들을 페이징 처리해서 조회해오기(Ajax 로 처리) === -->
    <select id="getCommentListPaging" parameterType="HashMap" resultType="com.spring.board.model.CommentVO">
        <!-- 첨부파일이 없는 경우 -->
        <!--  
        select name, content, regDate
		from 
		(
		  select row_number() over(order by seq desc) AS rno, name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		  from tbl_comment
		  where status = 1 and parentSeq = #{parentSeq}
		) V 
		where rno between #{startRno} and #{endRno}
		-->
		        
        <!-- 첨부파일이 있는 경우 -->
        select seq, name, content, regDate
             , fileName, orgFilename, fileSize 
		from 
		(
		  select row_number() over(order by seq desc) AS rno
		       , seq, name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		  	   , nvl(fileName,' ') AS fileName
			   , nvl(orgFilename, ' ') AS orgFilename
			   , nvl(to_char(fileSize), ' ') AS fileSize 
		  from tbl_comment
		  where status = 1 and parentSeq = #{parentSeq}
		) V 
		where rno between #{startRno} and #{endRno}
    </select>
    
    
    <!-- === #135. 원글 글번호(parentSeq)에 해당하는 댓글의 totalPage 수 알아오기 === -->
    <select id="getCommentTotalPage" parameterType="HashMap" resultType="int">
        select ceil(count(*)/#{sizePerPage})
		from tbl_comment
		where status = 1 and parentSeq = #{parentSeq}
    </select>
    
    
    
    <!-- === #146. tbl_board 테이블에서 groupno 컬럼의 최대값 알아오기 === -->
    <select id="getGroupnoMax" resultType="int">
        select nvl(max(groupno), 0)
		from tbl_board
    </select>
    
    
    <!-- === #159. 글쓰기(첨부파일이 있는 경우) === -->
    <insert id="add_withFile" parameterType="com.spring.board.model.BoardVO">
    	 <if test='fk_seq.equals("")'>
		     insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno, fileName, orgFilename, fileSize)
		     values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, default, default, #{fileName}, #{orgFilename}, #{fileSize})    
	     </if>
	     
	     <if test='!fk_seq.equals("")'>
		     insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno, fileName, orgFilename, fileSize)
		     values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depthno}+1, #{fileName}, #{orgFilename}, #{fileSize})    
	     </if>
    </insert>
    
    
    <!-- === #174. 댓글 1개만 조회해 주는 것 ===  -->
    <select id="getCommentOne" parameterType="String" resultType="com.spring.board.model.CommentVO">
    	 select fileName, orgFilename
    	 from tbl_comment
    	 where seq = #{seq}
    </select>
    

	
	<!-- === #190. Spring Scheduler(스프링스케줄러10) === -->
   <!-- === Spring Scheduler(스프링스케줄러)를 사용한 email 발송하기 === -->
   <resultMap type="HashMap" id="getReservationListMap">
       <result property="RESERVATIONSEQ"    column="reservationSeq"     javaType="String" />
       <result property="USERID"          column="userid"           javaType="String" />
       <result property="NAME"          column="name"              javaType="String" />
       <result property="EMAIL"          column="email"           javaType="String" />
       <result property="RESERVATIONDATE"    column="reservationDate"     javaType="String" />
    </resultMap>
   <select id="getReservationList" resultMap="getReservationListMap">
      select R.reservationSeq, M.userid, M.name, M.email, 
             to_char(R.reservationDate,'yyyy-mm-dd hh24:mi') as reservationDate
      from tbl_member M join tbl_reservation R
      on M.userid = R.fk_userid
      where R.mailSendCheck = 0
      and to_char(reservationDate, 'yyyy-mm-dd') = to_char(sysdate+2, 'yyyy-mm-dd')
   </select>
   
   <update id="updateMailSendCheck" parameterType="HashMap">
      update tbl_reservation set mailSendCheck = 1 
       where reservationSeq in 
       <foreach collection="arr_reservationSeq" index="i" open="(" separator="," close=")">
         ${arr_reservationSeq[i]}
      </foreach>
   </update>
 
 
<!-- === 인사관리 페이지에 접속한 페이지URL, 사용자ID, 접속IP주소, 접속시간을 기록으로 DB에 insert 하도록 한다. === -->
    <insert id="insert_accessTime" parameterType="HashMap">
       insert into tbl_empManger_accessTime(seqAccessTime, pageUrl, fk_userid, clientIP, accessTime)
       values(seq_seqAccessTime.nextval, #{pageUrl}, #{fk_userid}, #{clientIp}, #{accessTime})
    </insert>   
</mapper>
